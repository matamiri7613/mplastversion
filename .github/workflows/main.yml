name: Deploy Flask App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies locally (for testing)
      run: |
        python -m pip install --upgrade pip
        pip install flask gunicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Deploy to server using Git
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: 79.127.85.198
        username: root
        password: 133976beh
        script: |
          echo "Starting deployment process..."
          
          # Install system dependencies if needed
          apt update
          apt install -y python3 python3-pip python3-venv nginx git
          
          # Set up the application directory
          APP_DIR="/var/www/flask-app"
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Create app directory and navigate to it
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Clone or update the repository
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            echo "Cloning repository..."
            git clone $REPO_URL .
          fi
          
          # Create virtual environment
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install flask gunicorn
          
          # Install from requirements.txt if it exists
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # Create gunicorn config file
          cat > gunicorn.conf.py << 'EOF'
          bind = "127.0.0.1:8000"
          workers = 2
          timeout = 30
          keepalive = 2
          max_requests = 1000
          daemon = False
          EOF
          
          # Create systemd service file
          cat > /etc/systemd/system/flask-app.service << 'EOF'
          [Unit]
          Description=Flask App Service
          After=network.target
          
          [Service]
          User=root
          WorkingDirectory=/var/www/flask-app
          ExecStart=/var/www/flask-app/venv/bin/gunicorn -c gunicorn.conf.py app:app
          Restart=always
          RestartSec=3
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create Nginx configuration
          cat > /etc/nginx/sites-available/flask-app << 'EOF'
          server {
              listen 80;
              server_name 79.127.85.198;
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_redirect off;
              }
              
              location /static {
                  alias /var/www/flask-app/static;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/flask-app /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration
          nginx -t
          if [ $? -ne 0 ]; then
            echo "Nginx configuration test failed!"
            exit 1
          fi
          
          # Set proper permissions
          chown -R root:root /var/www/flask-app
          chmod -R 755 /var/www/flask-app
          
          # Stop services if running
          systemctl stop flask-app 2>/dev/null || true
          
          # Reload systemd and start services
          systemctl daemon-reload
          systemctl enable flask-app
          systemctl start flask-app
          systemctl restart nginx
          
          # Wait a moment for services to start
          sleep 5
          
          # Check service status
          if systemctl is-active --quiet flask-app; then
            echo "‚úÖ Flask app service is running"
          else
            echo "‚ùå Flask app service failed to start"
            echo "Service logs:"
            journalctl -u flask-app -n 20 --no-pager
            exit 1
          fi
          
          if systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx service is running"
          else
            echo "‚ùå Nginx service failed to start"
            systemctl status nginx --no-pager
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"
          echo "Your app should be available at: http://79.127.85.198"
          
    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 15
        
        # Try multiple times in case the app is still starting
        for i in {1..5}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://79.127.85.198 || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed - App is responding (attempt $i)"
            break
          else
            echo "‚è≥ Health check attempt $i - Got HTTP $response, retrying..."
            sleep 5
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ö†Ô∏è Health check completed with HTTP $response after 5 attempts"
          fi
        done
