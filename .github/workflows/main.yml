name: Deploy Flask App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies locally (for testing)
      run: |
        python -m pip install --upgrade pip
        pip install flask gunicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Copy application files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: 79.127.85.198
        username: root
        password: 133976beh
        source: "."
        target: "/var/www/flask-app"
        rm: true
        
    - name: Setup and deploy application
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: 79.127.85.198
        username: root
        password: 133976beh
        script: |
          echo "Starting deployment process..."
          
          # Navigate to app directory
          cd /var/www/flask-app
          
          # Install system dependencies if needed
          apt update
          apt install -y python3 python3-pip python3-venv nginx
          
          # Create virtual environment
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install flask gunicorn
          
          # Install from requirements.txt if it exists
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # Create gunicorn config file
          cat > gunicorn.conf.py << 'EOF'
          bind = "127.0.0.1:8000"
          workers = 2
          timeout = 30
          keepalive = 2
          max_requests = 1000
          EOF
          
          # Create systemd service file
          cat > /etc/systemd/system/flask-app.service << 'EOF'
          [Unit]
          Description=Flask App Service
          After=network.target
          
          [Service]
          User=root
          WorkingDirectory=/var/www/flask-app
          ExecStart=/var/www/flask-app/venv/bin/gunicorn -c gunicorn.conf.py app:app
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create Nginx configuration
          cat > /etc/nginx/sites-available/flask-app << 'EOF'
          server {
              listen 80;
              server_name 79.127.85.198;
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /static {
                  alias /var/www/flask-app/static;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/flask-app /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration
          nginx -t
          if [ $? -ne 0 ]; then
            echo "Nginx configuration test failed!"
            exit 1
          fi
          
          # Set proper permissions
          chown -R root:root /var/www/flask-app
          chmod -R 755 /var/www/flask-app
          
          # Reload systemd and start services
          systemctl daemon-reload
          systemctl enable flask-app
          systemctl restart flask-app
          systemctl restart nginx
          
          # Wait a moment for services to start
          sleep 5
          
          # Check service status
          if systemctl is-active --quiet flask-app; then
            echo "✅ Flask app service is running"
          else
            echo "❌ Flask app service failed to start"
            systemctl status flask-app
            exit 1
          fi
          
          if systemctl is-active --quiet nginx; then
            echo "✅ Nginx service is running"
          else
            echo "❌ Nginx service failed to start"
            systemctl status nginx
            exit 1
          fi
          
          echo "🎉 Deployment completed successfully!"
          echo "Your app should be available at: http://79.127.85.198"
          
    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 10
        
        response=$(curl -s -o /dev/null -w "%{http_code}" http://79.127.85.198 || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed - App is responding"
        else
          echo "⚠️ Health check warning - Got HTTP $response"
        fi
